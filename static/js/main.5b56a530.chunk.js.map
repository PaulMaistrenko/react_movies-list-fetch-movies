{"version":3,"sources":["types/ErrorMessage.ts","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["ErrorMessage","MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onAdd","useState","titleMovie","setTitleMovie","newMovie","setNewMovie","isErrorSearch","setIsErrorSearch","NONE","errorMessage","setErrorMessage","isSearching","setIsSearching","getMovieFromData","Poster","Title","Plot","imdbID","showError","error","handleSearch","event","a","preventDefault","query","fetch","then","res","json","catch","Response","Error","movieData","NO_MOVIE","UNEXPECTED","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","classNames","disabled","onClick","App","setMovies","addMovie","useCallback","some","item","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b56a530.chunk.js","sourcesContent":["export enum ErrorMessage {\n  NONE,\n  NO_MOVIE = 'Can`t find a movie with such a title',\n  UNEXPECTED = 'Unexpected error',\n}\n","import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { ErrorMessage } from '../../types/ErrorMessage';\nimport './FindMovie.scss';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAdd }) => {\n  const [titleMovie, setTitleMovie] = useState('');\n  const [newMovie, setNewMovie] = useState<Movie | null>(null);\n  const [isErrorSearch, setIsErrorSearch] = useState(false);\n  const [errorMessage, setErrorMessage]\n  = useState<ErrorMessage>(ErrorMessage.NONE);\n  const [isSearching, setIsSearching] = useState(false);\n\n  const resetForm = () => {\n    setTitleMovie('');\n  };\n\n  const handleChange = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setTitleMovie(event.target.value);\n    setIsErrorSearch(false);\n  };\n\n  const getMovieFromData = ({\n    Poster,\n    Title,\n    Plot,\n    imdbID,\n  }: MovieData): Movie => ({\n    title: Title,\n    description: Plot,\n    imgUrl: Poster === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : Poster,\n    imdbId: imdbID,\n    imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n  });\n\n  const showError = (error: ErrorMessage) => {\n    setIsErrorSearch(true);\n    setErrorMessage(error);\n  };\n\n  const handleSearch = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsSearching(true);\n    try {\n      const movieData = await getMovie(titleMovie);\n\n      if ('Error' in movieData) {\n        showError(ErrorMessage.NO_MOVIE);\n\n        return;\n      }\n\n      setNewMovie(getMovieFromData(movieData));\n      setIsErrorSearch(false);\n    } catch {\n      showError(ErrorMessage.UNEXPECTED);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const handleAdd = () => {\n    if (!newMovie) {\n      return;\n    }\n\n    onAdd(newMovie);\n    resetForm();\n    setNewMovie(null);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSearch}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={titleMovie}\n              onChange={handleChange}\n            />\n          </div>\n          {isErrorSearch && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {errorMessage}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button is-light\"',\n                { 'is-loading': isSearching },\n              )}\n              disabled={!titleMovie}\n            >\n              {!newMovie\n                ? 'Find a movie'\n                : 'Search again'}\n            </button>\n          </div>\n\n          {newMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {newMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={newMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=45a416db';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = useCallback((movie: Movie) => {\n    const hasMovie = movies.some(item => item.imdbId === movie.imdbId);\n\n    if (!hasMovie) {\n      setMovies((prevMovies) => [\n        ...prevMovies,\n        movie,\n      ]);\n    }\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}